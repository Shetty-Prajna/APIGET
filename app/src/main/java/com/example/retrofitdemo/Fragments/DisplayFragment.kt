package com.example.retrofitdemo.Fragments


import android.app.Application
import android.os.Bundle
import android.util.Log
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import androidx.lifecycle.Observer
import androidx.lifecycle.ViewModelProvider.AndroidViewModelFactory
import androidx.recyclerview.widget.LinearLayoutManager
import com.example.retrofitdemo.Adapters.DisplayAdapter
import com.example.retrofitdemo.R
import com.example.retrofitdemo.ViewModel.PostViewModel
import com.example.retrofitdemo.model.Post
import com.example.retrofitdemo.model.PostComment
import kotlinx.android.synthetic.main.comment_view_holder.*


class DisplayFragment : Fragment() {
    var postViewModel: PostViewModel? = null

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        val view = inflater.inflate(R.layout.comment_view_holder, container, false)
        return view
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        var model = AndroidViewModelFactory.getInstance(Application())
            .create(PostViewModel::class.java)
        var post=arguments?.getParcelable<Post>("id")
            Log.d("TAG", "id : ${post}")
            if(post!=null)
            {
                addData(post)
            }
            postViewModel = AndroidViewModelFactory.getInstance(Application()).create(
                PostViewModel::class.java
            )
            postViewModel?.getPostCommentsDetails(post?.id)
            observeStates()
        }

    private fun observeStates() {
        postViewModel?.isLoading?.observe(this, Observer {
            it?.let {
                if (it) {
                    progressBars.visibility = View.VISIBLE
                } else {
                    progressBars.visibility = View.GONE
                }
            }
        })

        postViewModel?.postCommentList?.observe(this, Observer {
            it?.let {
                if (it.isNotEmpty()) {
                    displayLoadDataList(it)


                }
            }
        })
    }
    private fun displayLoadDataList(users: List<PostComment>) {
        recyViewl.layoutManager = LinearLayoutManager(context)
       recyViewl.adapter = DisplayAdapter(users)
    }
    private fun addData(data: Post) {
        val view = LayoutInflater.from(context)
            .inflate(R.layout.recycle_post_view,constraint, false)
        view?.findViewById<TextView>(R.id.rvTextTittle)?.text = data.title
        view?.findViewById<TextView>(R.id.rvTextContent)?.text = data.body
        constraint.addView(view)

    }




























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































}


